@page "/indicateurs"
@inject HttpClient Http
@inject NavigationManager NavManager
@using System;
@using System.Diagnostics;
@using System.Collections.Generic;
@using System.Text;
@using System.IO;
@using System.Globalization;
@using Accord.Math;


<h1>Indicateurs</h1>

@if (Table.matrixListStatic[0] == null)
{
    <p><em>Loading...</em></p> }
else
{
    // Affichage de la table
    <table class="table">
        <thead>
            <tr>
                <th>Variance de Y</th>
                <th>Variance expliquee</th>
                <th>R squared</th>
                <th>adjusted R squared</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>@(Math.Round(varY * Math.Pow(10, NavMenu.rounding)) / Math.Pow(10, NavMenu.rounding))</td>
                <td>@(Math.Round(varExpliquee * Math.Pow(10, NavMenu.rounding)) / Math.Pow(10, NavMenu.rounding))</td>
                <td>@(Math.Round(RSquared * Math.Pow(10, NavMenu.rounding)) / Math.Pow(10, NavMenu.rounding))</td>
                <td>@(Math.Round(RSquaredAjusted * Math.Pow(10, NavMenu.rounding)) / Math.Pow(10, NavMenu.rounding))</td>
            </tr>
        </tbody>
    </table> //On a le boutton Proceed qui permet d'avoir les vecteurs X et Y
    <button @onclick="@ProceedButton">Proceed</button>
    <table class="table">
        <thead>
            <tr>
                <th>Check</th>
                <th>Center</th>
                <th>Name</th>
                <th>Selected</th>
                <th>Mean</th>
                <th>Var</th>
                <th>Coef</th>
                <th>BetaSR</th>
                <th>VarSR</th>
                <th>BetaMR</th>
                <th>VarMR</th>
                <th>Model BetaSR</th>
                <th>Model VarSR</th>
                <th>Model BetaMR</th>
                <th>Model VarMR</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var indicateur in Table.matrixListStatic.Last().Indicateurs)
            {
                // On check si la valeur du coefficient est égale à 0, auquel cas on désactive la checkbox et l'indicateur a la propriété IsChecked à false
                @if (Convert.ToDouble(indicateur.Coefficient) != 0.0) { indicateur.IsChecked = false; checkIsDisable = true; isChecked = false; }
                else if (!indicateur.IsChecked) { checkIsDisable = false; isChecked = false; }
                else { checkIsDisable = false; isChecked = true; }
                
                <tr>
                    <td>
                        <input type="checkbox" id="checked" name="checked" checked="@isChecked" disabled="@checkIsDisable" @onchange="eventArgs => { CheckboxClicked1(indicateur, eventArgs.Value); }">
                    </td>
                    <td>
                        <input type="checkbox" id="scales" name="scales" @onchange="eventArgs => { CheckboxClicked2(indicateur, eventArgs.Value); }">
                    </td>
                    <td>@indicateur.Nom</td>

                    <!-- Displaying properly if the indicator is checked or not ("Yes" or "No") -->
                    <td>@{string val = indicateur.IsChecked ? "Yes" : "No";} @val</td>

                    <td @onmousemove="@(e => fullNumber = indicateur.Moyenne)">@(Math.Round(indicateur.Moyenne * Math.Pow(10, NavMenu.rounding)) / Math.Pow(10, NavMenu.rounding))</td>
                    <td @onmousemove="@(e => fullNumber = indicateur.Variance)">@(Math.Round(indicateur.Variance * Math.Pow(10, NavMenu.rounding)) / Math.Pow(10, NavMenu.rounding))</td>
                    <td>
                        <input id="txtWord" type="number" name="txtWord" placeholder="Set a value" @bind="@indicateur.Coefficient" style="width:50px;" />
                    </td>
                    <td>@(Math.Round(indicateur.BetaValueSR * Math.Pow(10, NavMenu.rounding)) / Math.Pow(10, NavMenu.rounding))</td>
                    <td>@(Math.Round(indicateur.VarSR * Math.Pow(10, NavMenu.rounding)) / Math.Pow(10, NavMenu.rounding))</td>
                    <td>@(Math.Round(indicateur.BetaValueMR * Math.Pow(10, NavMenu.rounding)) / Math.Pow(10, NavMenu.rounding))</td>
                    <td>@(Math.Round(indicateur.VarMR * Math.Pow(10, NavMenu.rounding)) / Math.Pow(10, NavMenu.rounding))</td>


                    <td>@(Math.Round(indicateur.BetaValueSRModel * Math.Pow(10, NavMenu.rounding)) / Math.Pow(10, NavMenu.rounding))</td>
                    <td>@(Math.Round(indicateur.VarSRModel * Math.Pow(10, NavMenu.rounding)) / Math.Pow(10, NavMenu.rounding))</td>
                    <td>@(Math.Round(indicateur.BetaValueMRModel * Math.Pow(10, NavMenu.rounding)) / Math.Pow(10, NavMenu.rounding))</td>
                    <td>@(Math.Round(indicateur.VarMRModel * Math.Pow(10, NavMenu.rounding)) / Math.Pow(10, NavMenu.rounding))</td>
                </tr>
            }
        </tbody>
    </table>
})

@code { private MatriceR sousMatrice;

    private string value;
    private double fullNumber { get; set; }
    private bool checkIsDisable { get; set; }
    private bool isChecked { get; set; }

    private double varY;
    private double varExpliquee;
    private double RSquared;
    private double RSquaredAjusted;

    List<double[][]> grandX = new List<double[][]>();
    int covIndex;


    private void onChange(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        value = (string)args.Value;
    }

    public void Enter(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            if (value.Trim() != "")
            {
                //ici on stocke les coefficients des variables expliquées
            }
        }
    }



    /// <summary>
    /// fonction qui permet d'avoir les vecteurs X et Y, le grand X, ainsi que les betaMR et betaSR
    /// </summary>
    /// <param name="e"></param>
    private void ProceedButton(MouseEventArgs e)
    {
        List<int> coordMatrixX = new List<int>() { };
        List<int> coordMatrixY = new List<int>() { };
        List<Indicateur> tempList = new List<Indicateur>() { };
        int i = 0;
        covIndex = 0;

        // On commence par remplir les listes contenant les coordonnées des vecteurs X et Y sélcectionnés. tempList sert pour connaître les coefficients entrés par l'utiilisateur.
        foreach (Indicateur indicateur in Table.matrixListStatic.Last().Indicateurs)
        {
            if (indicateur.IsChecked) { coordMatrixX.Add(i); }
            else if (indicateur.Coefficient != 0.0) { tempList.Add(indicateur); coordMatrixY.Add(i); }
            i++;
        }

        if (coordMatrixX.Count > 0 && coordMatrixY.Count > 0)
        {
            Table.matrixListStatic.ForEach(matrix =>
            {
                CalculData(matrix, coordMatrixX, coordMatrixY, tempList);
                covIndex++;
            });
        }

        // On trie la liste en fonction de leur valeur de BetaSR
        Table.matrixListStatic.Last().Indicateurs.Sort((x, y) => y.BetaValueSR.CompareTo(x.BetaValueSR));
    }
    int nombrePoints = Table.matrixListStatic.Last().NombrePoints;


    private double[][] CalculData(MatriceR matrix, List<int> coordMatrixX, List<int> coordMatrixY, List<Indicateur> tempList, string add = "", int inde = -1)
    {

        if (add == null) { return null; }


        double[][] listX = null;
        double[][] listY = null, vecteurY = null;
        double[][] listCoef = null;


        listX = new double[coordMatrixX.Count][];
        listY = new double[coordMatrixY.Count][];
        listCoef = new double[tempList.Count][];

        // on remplit listY avec les lignes correspondantes (listCoef contient les coefficients
        // inscrits par l'utilisateur
        for (int j = 0; j < coordMatrixY.Count; j++)
        {
            listCoef[j] = new double[] { tempList[j].Coefficient };
            listY[j] = Table.listCovariancesStatic[covIndex][coordMatrixY[j]];
        }
        // enfin, on obtient le vecteur Y :
        vecteurY = ModuleCalcul.MultiplicationMatrix(ModuleCalcul.TransposeMatrix(listY), listCoef);


        // on peut donc calculer les betaSR
        // on utilise une List car on va utiliser la propriété Add (plus pratique qu'un array)
        List<double> preBetaSRList = new List<double>();
        List<double> preVarSRList = new List<double>();


        for (int j = 0; j < matrix.Indicateurs.Count; j++)
        {
            if (!coordMatrixY.Contains(j))
            {
                preBetaSRList.Add(vecteurY[j][0] / Table.listCovariancesStatic[covIndex][j][j]);
                preVarSRList.Add((vecteurY[j][0] / Table.listCovariancesStatic[covIndex][j][j]) * vecteurY[j][0] / nombrePoints);
            }
        }

        double[] betaSRList = preBetaSRList.ToArray();
        double[] varSRList = preVarSRList.ToArray();

        // On fait de même avec listX

        for (int j = 0; j < coordMatrixX.Count; j++)
        {
            listX[j] = new double[coordMatrixX.Count];

            for (int k = 0; k < coordMatrixX.Count; k++)
            {
                listX[j][k] = Table.listCovariancesStatic[covIndex][coordMatrixX[j]][coordMatrixX[k]];
            }
        }



        double[][] xPrimeY = new double[coordMatrixX.Count][];

        // Intersection entre le vecteur Y et les X selectionnés
        for (int j = 0; j < coordMatrixX.Count; j++)
        {
            xPrimeY[j] = new double[] { vecteurY[coordMatrixX[j]][0] };
        }
        Console.WriteLine("étape1");
        // On va calculer les betaMR et varMR
        double[][] betaMRList = ModuleCalcul.MultiplicationMatrix(listX.Inverse(), xPrimeY);
        Console.WriteLine("étape2");
        double[][] vecteurX = ModuleCalcul.MultiplicationMatrix(listX, betaMRList);   // vecteur ligne
        Console.WriteLine("étape3");
        double[][] matrixXBeta = ModuleCalcul.MultiplicationMatrix(betaMRList, listX);
        Console.WriteLine("étape4");
        //double[][] betaSRModelList = ModuleCalcul.MultiplicationMatrix(matrixXBeta.Inverse(), xPrimeY);    // voila ou est le probleme à cause de INVERSE 
        double[][] betaSRModelList = ModuleCalcul.MultiplicationMatrix(matrixXBeta, xPrimeY);       
        Console.WriteLine("étape5");
        //variance expliquee: transpose du vecteur des betas * matrice de  covariance des X fois vecteur des betas: 1 ligne n colonnes * (n*n) 8 (1 colonne n lignes)
        double[][] varianceExplicated = ModuleCalcul.MultiplicationMatrix(ModuleCalcul.TransposeMatrix(betaMRList), vecteurX); // vecteur colonne fois vecteur ligne = scalaire
        double varExpliquee = varianceExplicated[0][0];

        double[][] varMRList;

        // Dans le cas où add == "Y", c'est qu'on calcule les valeurs betaSRModel et varSRModel
        if (add == "Y")
        {

            listX = null;
            listX = new double[coordMatrixX.Count][];

            for (int j = 0; j < coordMatrixX.Count; j++)
            {
                listX[j] = Table.listCovariancesStatic[covIndex][coordMatrixX[j]];
            }

            listX = ModuleCalcul.MultiplicationMatrix(ModuleCalcul.TransposeMatrix(listX), betaMRList);
            List<double[][]> modelSR = GetSRModel(matrix, vecteurY, coordMatrixX, coordMatrixY, tempList, listX, xPrimeY);

            betaMRList = modelSR[0];
            varMRList = modelSR[1];

        }

        // Dans le cas contraire, on fait les calculs normaux
        else
        {
            varMRList = new double[betaMRList.GetLength(0)][];

            for (int j = 0; j < varMRList.GetLength(0); j++)
            {
                varMRList[j] = new double[betaMRList[0].GetLength(0)];
                varMRList[j][0] = betaMRList[j][0] * vecteurY[coordMatrixX[j]][0] / nombrePoints;

            }
        }

        if (add != "")
        {
            FillDataModel(matrix, coordMatrixX, coordMatrixY, listCoef, betaMRList, varMRList, add, inde, betaSRModelList);
        }

        else
        {
            FillData(matrix, coordMatrixX, coordMatrixY, tempList, listCoef, betaMRList, betaSRList, varMRList, varSRList);
        }

        grandX.Add(ModuleCalcul.MultiplicationMatrix(listX, betaMRList));  // à enlevercar c'est déjà vecteurX

        List<object[]> XSelected = new List<object[]>();
        List<object[]> YSelected = new List<object[]>();

        // on initialise les variances (variance des Y et variance expliquée)

        varExpliquee = 0.0;

        #region calcul de la variance totale varY

        varY = 0.0;
        // La matrice agregée est la dernière MatriceR de matrixListStatic

        MatriceR matriceAgregee = Table.matrixListStatic.Last();

        for (int i = 0; i < matriceAgregee.Indicateurs.Count; i++)
        {
            if (matriceAgregee.Indicateurs[i].Coefficient != 0.0 && matriceAgregee.Indicateurs[i].IsChecked == false)
            {
                YSelected.Add(new object[] { matriceAgregee.Indicateurs[i], i });

                // on rajoute les a^2 * VAR(Yi)
                varY += Math.Pow(matriceAgregee.Indicateurs[i].Coefficient, 2) * matriceAgregee.Indicateurs[i].Variance / nombrePoints;
            }
        }
        for (int i = 0; i < YSelected.Count - 1; i++)
        {
            Indicateur indI = (Indicateur)YSelected[i][0];
            for (int j = i; j < YSelected.Count; j++)
            {

                Indicateur indJ = (Indicateur)YSelected[j][0];

                // on rajoute les 2 * a * b * Cov(Yi, Yj)
                varY += 2 * Table.matrThirteenStatic[(int)YSelected[i][1]][(int)YSelected[j][1]] * indI.Coefficient * indJ.Coefficient / nombrePoints;

            }
        }
        #endregion  varY

        RSquared = varExpliquee / varY;

        RSquaredAjusted = 1 - (1 - RSquared) * (matriceAgregee.NombrePoints - 1) / (matriceAgregee.NombrePoints - XSelected.Count - 1);


        return null;
    }


    private void FillData(MatriceR matrix, List<int> coordMatrixX, List<int> coordMatrixY, List<Indicateur> tempList,
        double[][] listCoef, double[][] betaMRList, double[] betaSRList, double[][] varMRList, double[] varSRList)
    {
        //Enfin, on ré-attribue les bonnes valeurs de betaValueSR et betaValueMR :
        // i est l'indice qui parcourt les listes betaMRList et varMRList.
        // m est l'indice qui parcourt les listes betaSRList et varSRList.
        // n est l'indice qui parcout la liste listCoeff
        int i = 0, m = 0, n = 0;
        for (int j = 0; j < Table.matrixListStatic.Last().Indicateurs.Count; j++)
        {
            matrix.Indicateurs[j].BetaValueMR = 0.0;
            matrix.Indicateurs[j].BetaValueSR = 0.0;
            matrix.Indicateurs[j].VarMR = 0.0;
            matrix.Indicateurs[j].VarSR = 0.0;


            // Si l'indicateur est pris comme X, on attribue les bonnes valeurs de BetaMR et VarMR aux indicateurs
            if (coordMatrixX.Contains(j))
            {
                matrix.Indicateurs[j].IsChecked = true;
                matrix.Indicateurs[j].BetaValueMR = betaMRList[i][0];
                matrix.Indicateurs[j].VarMR = varMRList[i][0];

                matrix.Indicateurs[j].BetaValueMRModel = 0.0;
                matrix.Indicateurs[j].VarMRModel = 0.0;
                matrix.Indicateurs[j].BetaValueSRModel = 0.0;
                matrix.Indicateurs[j].VarSRModel = 0.0;


                i++;
            }

            // Si l'indicateur n'est pas pris comme X, on s'occupe de calculer betaMRModel, varMRModel, betaSRModel
            // et varSRModel
            else
            {
                matrix.Indicateurs[j].IsChecked = false;

                if (!coordMatrixY.Contains(j))
                {

                    // On ajoute l'élément j à la liste des X, puis on le retire (le temps de calculer les variables MRModel)
                    coordMatrixX.Add(j);
                    coordMatrixX.Sort();
                    CalculData(matrix, coordMatrixX, coordMatrixY, tempList, "X", j);
                    CalculData(matrix, coordMatrixX, coordMatrixY, tempList, "Y", j);
                    coordMatrixX.Remove(j);
                }
            }


            // Si le coefficient est égal à 0, on attribue les bonnes valeurs de BetaSR et VarSR aux indicateurs
            if (!coordMatrixY.Contains(j))
            {
                matrix.Indicateurs[j].Coefficient = 0.0;
                matrix.Indicateurs[j].BetaValueSR = betaSRList[m];
                matrix.Indicateurs[j].VarSR = varSRList[m];

                m++;
            }

            // Si l'indicateur est pris comme Y, on précise sa valeur dans matrix.Indicateurs
            else
            {
                matrix.Indicateurs[j].Coefficient = listCoef[n][0];

                n++;
            }
        }
    }
    private void FillDataModel(MatriceR matrix, List<int> coordMatrixX, List<int> coordMatrixY, double[][] listCoef,
        double[][] betaMRList, double[][] varMRList, string type, int inde, double[][] betaSRModelList)
    {
        switch (type)
        {


            // cas des Multi Reg
            case "X":

                Console.WriteLine("X");

                int posMR = coordMatrixX.IndexOf(inde);

                //Console.WriteLine("posMR: " + posMR);
                //Console.WriteLine("betaMRList: " + betaMRList.Length);
                //Console.WriteLine("varMRList: " + varMRList.Length);

                matrix.Indicateurs[inde].BetaValueMRModel = betaMRList[posMR][0];
                matrix.Indicateurs[inde].VarMRModel = varMRList[posMR][0];

                //Console.WriteLine("ended \n");

                break;

            // cas des Single Reg
            case "Y":

                int posSR = coordMatrixX.IndexOf(inde);

                //Console.WriteLine("posSR: " + posSR);
                //Console.WriteLine("betaMRList: " + betaMRList.Length);
                //Console.WriteLine("varMRList: " + varMRList.Length);


                //matrix.Indicateurs[inde].BetaValueSRModel = betaMRList[posSR][0];      //et laaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
                matrix.Indicateurs[inde].BetaValueSRModel = betaSRModelList[posSR][0];
                matrix.Indicateurs[inde].VarSRModel = varMRList[posSR][0];

                break;

            default:
                break;
        }

    }

    private List<double[][]> GetSRModel(MatriceR matrix, double[][] vecteurY, List<int> coordMatrixX, List<int> coordMatrixY, List<Indicateur> tempList, double[][] listX, double[][] xPrimeY)
    {

        double[][] newListX = null;
        newListX = new double[coordMatrixX.Count][];

        for (int j = 0; j < coordMatrixX.Count; j++)
        {
            newListX[j] = new double[coordMatrixX.Count];

            for (int k = 0; k < coordMatrixX.Count; k++)
            {
                newListX[j][k] = Table.listCovariancesStatic[covIndex][coordMatrixX[j]][coordMatrixX[k]];
            }
        }

        double[][] betaMRList = ModuleCalcul.MultiplicationMatrix(newListX.Inverse(), xPrimeY);
        double[][] varMRList = new double[betaMRList.GetLength(0)][];

        for (int j = 0; j < varMRList.GetLength(0); j++)
        {
            varMRList[j] = new double[betaMRList[0].GetLength(0)];
            varMRList[j][0] = betaMRList[j][0] * vecteurY[coordMatrixX[j]][0] / nombrePoints;

        }

        return new List<double[][]>() { betaMRList, varMRList };
    }  // cette méthode à revoir




    public static void CheckboxClicked1(Indicateur selected, object CheckedValue)
    {
        selected.IsChecked = (bool)CheckedValue; // Convert.ToBoolean(CheckedValue)
    }

    private static void CheckboxClicked2(Indicateur selected, object CheckedValue)
    {
        // fonction qui doit scale l'indicateur comme sur r avec la fonction scale

    } }
